name: CI - scan and build image

on:
  # push:
  #  branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  # schedule:
  #   - cron: '45 17 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  
jobs:
  sonar-scan:
    environment: SonarqubeEnv
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: ./gradlew build sonar --info

  semgrep:
    environment: CortexCloudEnv
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download semgrep
        run: python3 -m pip install semgrep
      - name: Run Semgrep scan
        run: | 
          echo "Scanning with semgrep: semgrep scan --sarif --sarif-output=${{ github.workspace }}/semgrep.sarif"
          semgrep scan --sarif --sarif-output=${{ github.workspace }}/semgrep.sarif
      - name: Upload SARIF file to cortex        
        run: |
          echo "uploading sarif generated by semgrep to cortex cloud ..."
          curl -ifS ${{vars.CORTEX_API_URL}}/public_api/appsec/v1/collectors/${{ vars.CORTEX_COLLECTOR_ID }}?repository_id=${{ vars.CORTEX_REPO_ASSET_ID }}&branch=${{github.ref_name}} \
          --header 'x-crtx-auth-id: ${{secrets.CORTEX_API_COLLECTOR_KEY_ID}}' \
          --header 'Authorization: ${{secrets.CORTEX_API_COLLECTOR_KEY}}' \
          --header 'Content-Type: application/json' \
          --data-binary '@${{ github.workspace }}/semgrep.sarif'

  cortex-code-scan:
    runs-on: ubuntu-latest
    environment: CortexCloudEnv
    env:
      CORTEX_CLI_VERSION: 0.13.0
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    
    - name: Get Temporary Token
      run: |
        TOKEN_RESPONSE=$(curl --location "${{vars.CORTEX_API_URL}}/public_api/v1/unified-cli/image/token" \
          --header "Authorization: ${{secrets.CORTEX_API_CLI_KEY}}" \
          --header "x-xdr-auth-id: ${{secrets.CORTEX_API_CLI_KEY_ID}}" \
          --header 'Content-Type: application/json' \
          --data '{}')
        TEMP_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.token')
        echo "TEMP_TOKEN=$TEMP_TOKEN" >> $GITHUB_ENV

    - name: Pull Docker Image
      run: |
        docker pull distributions.traps.paloaltonetworks.com/cli-docker/${{env.TEMP_TOKEN}}/method:amd64-${{env.CORTEX_CLI_VERSION}}
        docker tag distributions.traps.paloaltonetworks.com/cli-docker/${{env.TEMP_TOKEN}}/method:amd64-${{env.CORTEX_CLI_VERSION}} cortexcli:${{env.CORTEX_CLI_VERSION}}

    - name: Run Docker Container
      run: |
        docker run --rm -v ${{ github.workspace }}:/home/code cortexcli:${{ env.CORTEX_CLI_VERSION }} \
          --api-base-url ${{vars.CORTEX_API_URL}} \
          --api-key ${{secrets.CORTEX_API_CLI_KEY}} \
          --api-key-id ${{secrets.CORTEX_API_CLI_KEY_ID}} \
          code scan \
          --directory /home/code \
          --repo-id ${{github.repository}} \
          --branch ${{github.ref_name}} \
          --source GITHUB_ACTIONS \
          --create-repo-if-missing \
          --upload-mode no-upload
  
  build:
    needs: cortex-code-scan
    runs-on: ubuntu-latest
    name: Build Image and Push to Registry
    environment: AWSEnv
    steps:
    - name: Get short SHA
      run: echo "GHA_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-2

    - name: ECR Login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Tag and Push Docker images
      uses: docker/build-push-action@master
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_REPOSITORY: log4shell-vulnerable-app 
          IMAGE_TAG: ${{ env.GHA_SHA }}
      with:
        # tags: ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_REPOSITORY:$IMAGE_TAG, $ECR_REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG
        tags: ${{env.ECR_REGISTRY}}/${{env.IMAGE_REPOSITORY}}:${{env.IMAGE_TAG}}
        push: true
        provenance: false
