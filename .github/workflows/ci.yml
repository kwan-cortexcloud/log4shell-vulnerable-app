name: CI - scan and build image

on:
  push:
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  # schedule:
  #   - cron: '45 17 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  
jobs:
  cortex-code-scan:
    runs-on: ubuntu-latest
    environment: CortexCloudEnv
    env:
      CORTEX_API_KEY: ${{secrets.CORTEX_API_KEY}}
      CORTEX_API_KEY_ID: ${{secrets.CORTEX_API_KEY_ID}}
      CORTEX_API_URL: https://api-ms-cxsiamp.xdr.us.paloaltonetworks.com
      CORTEX_CLI_VERSION: 0.11.0
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    
    - name: Get Temporary Token
      run: |
        TOKEN_RESPONSE=$(curl --location "${CORTEX_API_URL}/public_api/v1/unified-cli/image/token" \
          --header "Authorization: ${CORTEX_API_KEY}" \
          --header "x-xdr-auth-id: ${CORTEX_API_KEY_ID}" \
          --header 'Content-Type: application/json' \
          --data '{}')
        TEMP_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.token')
        echo "TEMP_TOKEN=$TEMP_TOKEN" >> $GITHUB_ENV

    - name: Pull Docker Image
      run: |
        docker pull distributions.traps.paloaltonetworks.com/cli-docker/${{env.TEMP_TOKEN}}/method:amd64-${{env.CORTEX_CLI_VERSION}}
        docker tag distributions.traps.paloaltonetworks.com/cli-docker/${{env.TEMP_TOKEN}}/method:amd64-${{env.CORTEX_CLI_VERSION}} cortexcli:${{env.CORTEX_CLI_VERSION}}

    - name: Run Docker Container
      run: |
        docker run --rm -v ${{ github.workspace }}:/home/code cortexcli:${{ env.CORTEX_CLI_VERSION }} \
          --api-base-url ${{CORTEX_API_URL}} \
          --api-key ${{CORTEX_API_KEY}} \
          --api-key-id ${{CORTEX_API_KEY_ID}} \
          code scan \
          --directory /home/code \
          --repo-id ${{github.repository}} \
          --branch ${{github.ref_name}} \
          --source 'GITHUB_ACTIONS' \
          --create-repo-if-missing
  
  build:
    needs: cortex-code-scan
    runs-on: ubuntu-latest
    name: Build Image and Push to Registry
    environment: AWSEnv
    steps:
    - name: Get short SHA
      run: echo "GHA_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-2

    - name: ECR Login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Tag and Push Docker images
      uses: docker/build-push-action@master
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_REPOSITORY: log4shell-vulnerable-app 
          IMAGE_TAG: ${{ env.GHA_SHA }}
      with:
        # tags: ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_REPOSITORY:$IMAGE_TAG, $ECR_REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG
        tags: ${{env.ECR_REGISTRY}}/${{env.IMAGE_REPOSITORY}}:${{env.IMAGE_TAG}}
        push: true
        provenance: false
